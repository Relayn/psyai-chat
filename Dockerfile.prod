# Dockerfile.prod

# --- СТАДИЯ 1: Сборщик зависимостей ---
# Используем полный образ, чтобы у Poetry точно были все инструменты.
FROM python:3.13 AS builder

# Устанавливаем конкретную современную версию Poetry
RUN pip install poetry==1.8.2

WORKDIR /app
COPY poetry.lock pyproject.toml ./

# Генерируем requirements.txt для основного приложения
# ВАЖНО: --without dev исключает зависимости для разработки (pytest и т.д.)
RUN python -m poetry export -f requirements.txt --output requirements.txt --without dev


# --- СТАДИЯ 2: Финальный образ для Production ---
# Возвращаемся к slim-образу для экономии места
FROM python:3.13-slim AS production

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
# Устанавливаем переменную окружения, чтобы Django знал, что работает в продакшене
# Это повлияет на сбор статики и другие настройки безопасности.
ENV DJANGO_SETTINGS_MODULE=config.settings

WORKDIR /app

# Устанавливаем только необходимые для работы системные зависимости
RUN apt-get update && \
    apt-get install -y --no-install-recommends libpq-dev && \
    rm -rf /var/lib/apt/lists/*

# Копируем сгенерированный requirements.txt из сборщика
COPY --from=builder /app/requirements.txt .

# Устанавливаем зависимости через pip
RUN pip install --no-cache-dir -r requirements.txt

# Копируем весь код приложения
COPY . .

# Создаем непривилегированного пользователя для безопасности
RUN addgroup --system appuser && \
    adduser --system --ingroup appuser appuser && \
    mkdir -p /app/media /app/staticfiles && \
    chown -R appuser:appuser /app /app/media /app/staticfiles

# Переключаемся на этого пользователя
USER appuser

# Собираем статические файлы. Django использует STATIC_ROOT из settings.py
RUN python manage.py collectstatic --noinput

# Открываем порт
EXPOSE 8000

# Команда для запуска приложения через Daphne (production-ready ASGI сервер)
CMD ["daphne", "-b", "0.0.0.0", "-p", "8000", "config.asgi:application"]
