# Dockerfile.prod

# --- СТАДИЯ 1: Сборка зависимостей ---
# Используем образ с Poetry для установки зависимостей
FROM python:3.13-slim as builder

# Устанавливаем переменные окружения
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

WORKDIR /app

# Устанавливаем системные зависимости, необходимые для сборки некоторых пакетов
RUN apt-get update && apt-get install -y build-essential libpq-dev

# Копируем файлы с зависимостями
COPY poetry.lock pyproject.toml ./

# Устанавливаем зависимости проекта с помощью Poetry
RUN pip install poetry && \
    poetry install --no-dev --no-root && \
    # Экспортируем зависимости в requirements.txt для использования в финальном образе
    poetry export -f requirements.txt --output requirements.txt --without-hashes


# --- СТАДИЯ 2: Финальный образ ---
# Используем чистый и легковесный образ Python
FROM python:3.13-slim

# Устанавливаем переменные окружения
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

# Устанавливаем системные зависимости, необходимые для работы приложения (только libpq)
RUN apt-get update && apt-get install -y libpq-dev && rm -rf /var/lib/apt/lists/*

# Копируем requirements.txt из стадии сборки
COPY --from=builder /app/requirements.txt .

# Устанавливаем зависимости с помощью pip
RUN pip install --no-cache-dir -r requirements.txt

# Копируем весь код приложения
COPY . .

# Собираем статические файлы
# Ключ --noinput важен для автоматической сборки
RUN python manage.py collectstatic --noinput

# Открываем порт
EXPOSE 8000

# Команда для запуска приложения
# Используем Daphne как production-ready ASGI сервер
CMD ["daphne", "-b", "0.0.0.0", "-p", "8000", "config.asgi:application"]
